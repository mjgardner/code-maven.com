=title Solution: Number guessing game in Ruby
=timestamp 2015-10-18T11:00:01
=indexes exercises, rand, gets, print, puts, if, elsif, else
=status show
=books ruby
=author szabgab
=archive 1
=comments_disqus_enable 0

=abstract start

In this <a href="/exercises">exercise</a>, you were asked to create the first version of the
<a href="/exercise-number-guessing-game">Number guessing game</a>. We are going to see a solution
in Ruby.

=abstract end

<include file="examples/ruby/number_guessing.rb">

We use the <hl>rand</hl> function to generate a random number. If we called it without any parameter,
<hl>rand</hl> would return a floating point number between 0 and 1.
As we passed a whole number to it, the <hl>rand</hl> function generated a whole number between
0 and 200, the number we gave.

There is a commented out line printing the hidden value back. I used it to be able to test the code
which was comparing my input to the hidden number.

Then we use the <hl>print</hl> function to ask the user to type in a number. We use the
<hl>print</hl> functions instead of the <hl>puts</hl> function to avoid adding a trailing newline.
So the cursor will appear on the same line where the request was printed.

<hl>gets</hl> reads in whatever we type in response. <hl>to_i</hl> converts it to integer. (By default when
we read in something from the standard input, that will be a string. Even if it only contains numbers.
We have to tell Ruby to convert it to an integer.)

Then we have 3 cases depending the relative values of the <hl>hidden</hl> and <hl>guess</hl> variables.

